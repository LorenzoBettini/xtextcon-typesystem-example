/*
 * generated by Xtext
 */
package org.example.expressions.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.example.expressions.expressions.AbstractElement
import org.example.expressions.typing.ExpressionsTypeProvider
import org.example.expressions.ui.contentassist.AbstractExpressionsProposalProvider

import static extension org.example.expressions.typing.ExpressionsModelUtil.*
import org.example.expressions.typing.ExpressionsTypeConformanceComputer

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
class ExpressionsProposalProvider extends AbstractExpressionsProposalProvider {
	
	@Inject extension ExpressionsTypeProvider
	@Inject extension ExpressionsTypeConformanceComputer
	
	override completeAtomic_Variable(EObject elem, Assignment assignment, 
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (!(elem instanceof AbstractElement))
			return; // no proposal
		
		val abstractElement = elem as AbstractElement
		val type = abstractElement.inferredType()

		(abstractElement).variablesDefinedBefore.
		forEach[
			variable |
			if (type === null || variable.inferredType.isAssignableTo(type))
				acceptor.accept(createCompletionProposal
			    		(variable.name, 
			    		variable.name + " - Variable", null, 
			    		context));
	    ]
	}
	
}
