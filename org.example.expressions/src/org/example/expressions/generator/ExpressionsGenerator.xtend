/*
 * generated by Xtext
 */
package org.example.expressions.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.example.expressions.expressions.ExpressionsModel
import org.example.expressions.interpreter.ExpressionsInterpreter
import static extension org.eclipse.xtext.nodemodel.util.NodeModelUtils.*

class ExpressionsGenerator implements IGenerator {
	
	@Inject extension ExpressionsInterpreter
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		resource.allContents.toIterable.filter(typeof(ExpressionsModel)).forEach[
			fsa.generateFile('''«resource.URI.lastSegment».evaluated''', 
				interpretExpressions
			)
		]
	}
	
	def interpretExpressions(ExpressionsModel model) {
		model.elements.map[
			'''«getNode.getTokenText» ~> «interpret»'''
		].join("\n")
	}
}
